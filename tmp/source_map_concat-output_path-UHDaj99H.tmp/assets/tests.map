{"version":3,"sources":["student-info/tests/app.jshint.js","student-info/tests/application/adapter.jshint.js","student-info/tests/application/model.jshint.js","student-info/tests/application/route.jshint.js","student-info/tests/application/serializer.jshint.js","student-info/tests/helpers/destroy-app.js","student-info/tests/helpers/destroy-app.jshint.js","student-info/tests/helpers/module-for-acceptance.js","student-info/tests/helpers/module-for-acceptance.jshint.js","student-info/tests/helpers/resolver.js","student-info/tests/helpers/resolver.jshint.js","student-info/tests/helpers/start-app.js","student-info/tests/helpers/start-app.jshint.js","student-info/tests/resolver.jshint.js","student-info/tests/router.jshint.js","student-info/tests/student/create-new/model.jshint.js","student-info/tests/student/create-new/route.jshint.js","student-info/tests/student/edit-student/model.jshint.js","student-info/tests/student/edit-student/route.jshint.js","student-info/tests/student/md-student/adapter.jshint.js","student-info/tests/student/md-student/model.jshint.js","student-info/tests/student/md-student/serializer.jshint.js","student-info/tests/student/student-list/controller.jshint.js","student-info/tests/student/student-list/model.jshint.js","student-info/tests/student/student-list/route.jshint.js","student-info/tests/test-helper.js","student-info/tests/test-helper.jshint.js","student-info/tests/unit/application/model-test.js","student-info/tests/unit/application/model-test.jshint.js","student-info/tests/unit/application/route-test.js","student-info/tests/unit/application/route-test.jshint.js","student-info/tests/unit/application/serializer-test.js","student-info/tests/unit/application/serializer-test.jshint.js","student-info/tests/unit/student/create-new/model-test.js","student-info/tests/unit/student/create-new/model-test.jshint.js","student-info/tests/unit/student/create-new/route-test.js","student-info/tests/unit/student/create-new/route-test.jshint.js","student-info/tests/unit/student/edit-student/model-test.js","student-info/tests/unit/student/edit-student/model-test.jshint.js","student-info/tests/unit/student/edit-student/route-test.js","student-info/tests/unit/student/edit-student/route-test.jshint.js","student-info/tests/unit/student/md-student/model-test.js","student-info/tests/unit/student/md-student/model-test.jshint.js","student-info/tests/unit/student/model-test.js","student-info/tests/unit/student/model-test.jshint.js","student-info/tests/unit/student/student-list/controller-test.js","student-info/tests/unit/student/student-list/controller-test.jshint.js","student-info/tests/unit/student/student-list/model-test.js","student-info/tests/unit/student/student-list/model-test.jshint.js","student-info/tests/unit/student/student-list/route-test.js","student-info/tests/unit/student/student-list/route-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('student-info/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'app.js should pass jshint.\\napp.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 3, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 4, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 6, col 1, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\napp.js: line 13, col 3, \\'object short notation\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\napp.js: line 18, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n7 errors');\n  });\n});","define('student-info/tests/application/adapter.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | application/adapter.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'application/adapter.js should pass jshint.\\napplication/adapter.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napplication/adapter.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napplication/adapter.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n3 errors');\n  });\n});","define('student-info/tests/application/model.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | application/model.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'application/model.js should pass jshint.\\napplication/model.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napplication/model.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('student-info/tests/application/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | application/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'application/route.js should pass jshint.\\napplication/route.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napplication/route.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('student-info/tests/application/serializer.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | application/serializer.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'application/serializer.js should pass jshint.\\napplication/serializer.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napplication/serializer.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('student-info/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('student-info/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('student-info/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'student-info/tests/helpers/start-app', 'student-info/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _studentInfoTestsHelpersStartApp, _studentInfoTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _studentInfoTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _studentInfoTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('student-info/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('student-info/tests/helpers/resolver', ['exports', 'student-info/resolver', 'student-info/config/environment'], function (exports, _studentInfoResolver, _studentInfoConfigEnvironment) {\n\n  var resolver = _studentInfoResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _studentInfoConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _studentInfoConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('student-info/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('student-info/tests/helpers/start-app', ['exports', 'ember', 'student-info/app', 'student-info/config/environment'], function (exports, _ember, _studentInfoApp, _studentInfoConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _studentInfoConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _studentInfoApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('student-info/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('student-info/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'resolver.js should pass jshint.\\nresolver.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nresolver.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('student-info/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'router.js should pass jshint.\\nrouter.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nrouter.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nrouter.js: line 4, col 1, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nrouter.js: line 17, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n4 errors');\n  });\n});","define('student-info/tests/student/create-new/model.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | student/create-new/model.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'student/create-new/model.js should pass jshint.\\nstudent/create-new/model.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nstudent/create-new/model.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('student-info/tests/student/create-new/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | student/create-new/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'student/create-new/route.js should pass jshint.\\nstudent/create-new/route.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nstudent/create-new/route.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('student-info/tests/student/edit-student/model.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | student/edit-student/model.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'student/edit-student/model.js should pass jshint.\\nstudent/edit-student/model.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nstudent/edit-student/model.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('student-info/tests/student/edit-student/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | student/edit-student/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'student/edit-student/route.js should pass jshint.\\nstudent/edit-student/route.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nstudent/edit-student/route.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('student-info/tests/student/md-student/adapter.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | student/md-student/adapter.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'student/md-student/adapter.js should pass jshint.\\nstudent/md-student/adapter.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nstudent/md-student/adapter.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nstudent/md-student/adapter.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n3 errors');\n  });\n});","define('student-info/tests/student/md-student/model.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | student/md-student/model.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'student/md-student/model.js should pass jshint.\\nstudent/md-student/model.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nstudent/md-student/model.js: line 12, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('student-info/tests/student/md-student/serializer.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | student/md-student/serializer.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'student/md-student/serializer.js should pass jshint.\\nstudent/md-student/serializer.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nstudent/md-student/serializer.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('student-info/tests/student/student-list/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | student/student-list/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'student/student-list/controller.js should pass jshint.\\nstudent/student-list/controller.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nstudent/student-list/controller.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('student-info/tests/student/student-list/model.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | student/student-list/model.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'student/student-list/model.js should pass jshint.\\nstudent/student-list/model.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nstudent/student-list/model.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('student-info/tests/student/student-list/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | student/student-list/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'student/student-list/route.js should pass jshint.\\nstudent/student-list/route.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nstudent/student-list/route.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nstudent/student-list/route.js: line 8, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n3 errors');\n  });\n});","define('student-info/tests/test-helper', ['exports', 'student-info/tests/helpers/resolver', 'ember-qunit'], function (exports, _studentInfoTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_studentInfoTestsHelpersResolver['default']);\n});","define('student-info/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('student-info/tests/unit/application/model-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('application', 'Unit | Model | application', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('student-info/tests/unit/application/model-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/application/model-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/application/model-test.js should pass jshint.');\n  });\n});","define('student-info/tests/unit/application/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('student-info/tests/unit/application/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/application/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/application/route-test.js should pass jshint.');\n  });\n});","define('student-info/tests/unit/application/serializer-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('application', 'Unit | Serializer | application', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:application']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('student-info/tests/unit/application/serializer-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/application/serializer-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/application/serializer-test.js should pass jshint.');\n  });\n});","define('student-info/tests/unit/student/create-new/model-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('student/create-new', 'Unit | Model | student/create new', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('student-info/tests/unit/student/create-new/model-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/student/create-new/model-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/student/create-new/model-test.js should pass jshint.');\n  });\n});","define('student-info/tests/unit/student/create-new/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:student/create-new', 'Unit | Route | student/create new', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('student-info/tests/unit/student/create-new/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/student/create-new/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/student/create-new/route-test.js should pass jshint.');\n  });\n});","define('student-info/tests/unit/student/edit-student/model-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('student/edit-student', 'Unit | Model | student/edit student', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('student-info/tests/unit/student/edit-student/model-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/student/edit-student/model-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/student/edit-student/model-test.js should pass jshint.');\n  });\n});","define('student-info/tests/unit/student/edit-student/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:student/edit-student', 'Unit | Route | student/edit student', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('student-info/tests/unit/student/edit-student/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/student/edit-student/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/student/edit-student/route-test.js should pass jshint.');\n  });\n});","define('student-info/tests/unit/student/md-student/model-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('student/md-student', 'Unit | Model | student/md student', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('student-info/tests/unit/student/md-student/model-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/student/md-student/model-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/student/md-student/model-test.js should pass jshint.');\n  });\n});","define('student-info/tests/unit/student/model-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('student', 'Unit | Model | student', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('student-info/tests/unit/student/model-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/student/model-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/student/model-test.js should pass jshint.');\n  });\n});","define('student-info/tests/unit/student/student-list/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:student/student-list', 'Unit | Controller | student/student list', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('student-info/tests/unit/student/student-list/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/student/student-list/controller-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/student/student-list/controller-test.js should pass jshint.');\n  });\n});","define('student-info/tests/unit/student/student-list/model-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('student/student-list', 'Unit | Model | student/student list', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('student-info/tests/unit/student/student-list/model-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/student/student-list/model-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/student/student-list/model-test.js should pass jshint.');\n  });\n});","define('student-info/tests/unit/student/student-list/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:student/student-list', 'Unit | Route | student/student list', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('student-info/tests/unit/student/student-list/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/student/student-list/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/student/student-list/route-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('student-info/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}